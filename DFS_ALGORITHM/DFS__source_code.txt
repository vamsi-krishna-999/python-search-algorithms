Source code:
=============



def dfs(graph, start, visited=None):
    """
    Perform Depth-First Search (DFS) traversal on a graph starting from a given node.
    
    Parameters:
        graph (dict): The graph represented as an adjacency list.
        start: The starting node for DFS traversal.
        visited (set): A set to keep track of visited nodes. (Default is None)
    
    Returns:
        visited (set): Set of visited nodes during DFS traversal.
    """
    if visited is None:
        visited = set()  # Initialize an empty set to store visited nodes
    
    visited.add(start)  # Mark the current node as visited
    print(start)        # Print the current node
    
    # Explore neighbors of the current node
    for neighbor in graph[start]:
        if neighbor not in visited:
            # Recursively call DFS on unvisited neighbors
            dfs(graph, neighbor, visited)
    
    return visited



Explanation:
--------------


Function Signature: The dfs() function takes three parameters:

graph: 

The graph to be traversed, represented as an adjacency 
list where keys are nodes and values are lists of adjacent nodes.

start: 

The starting node for DFS traversal.

visited:

A set to keep track of visited nodes. This parameter is optional 
and initialized as None. If not provided, a new set is created
within the function.


Base Case for Recursion: 

If visited is None, it means the function is called for the 
first time, so we initialize visited as an empty set.


Mark Node as Visited: 

The current node start is added to the visited set to mark it as visited.


Print Current Node: 

This line prints the value of the current node. You can replace print(start) 
with any other operation you wish to perform on the node during traversal.

Explore Neighbors: 

For each neighbor of the current node (neighbor), if the neighbor 
has not been visited yet, the dfs() function is recursively called 
with the neighbor as the new starting node. 
This ensures that every unvisited neighbor is explored.


Return Visited Nodes: 

Finally, the function returns the visited set, which contains 
all the nodes visited during DFS traversal.