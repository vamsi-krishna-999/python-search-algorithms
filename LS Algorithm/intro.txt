Linear Search Algorithm:
=========================
Start from the beginning of the list.
Compare the target value with each element of the list.
If the current element matches the target value, return its index.
If the target value is not found after checking all elements, return -1 (indicating that the target value is not in the list).


def linear_search(arr, target):
    """
    Perform linear search to find the target value in the given list.
    
    Parameters:
        arr (list): The list to search in.
        target: The value to search for.
    
    Returns:
        int: The index of the target value if found, otherwise -1.
    """
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

# Example usage:
if __name__ == "__main__":
    arr = [10, 4, 2, 8, 5, 3]
    target = 8
    result = linear_search(arr, target)
    if result != -1:
        print(f"Target {target} found at index {result}.")
    else:
        print(f"Target {target} not found in the list.")





Explanation:
The linear_search function takes a list arr and a target value target as input.

It iterates through each element of the list using a for loop.

Inside the loop, it compares each element with the target value.

If a match is found, it returns the index of the target value.

If no match is found after checking all elements, it returns -1.

Linear search is straightforward to implement and understand, 
but it is not very efficient for large datasets, as it has a 
time complexity of O(n), where n is the number of elements in 
the list. It's primarily suitable for small lists or 
unsorted data.